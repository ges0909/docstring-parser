{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"API documentation to be added","title":"Home"},{"location":"#api-documentation","text":"to be added","title":"API documentation"},{"location":"docstring-parser/","text":"Docstring Parser test_google_style_docstring_parser ( benchmark ) Summary line. Extended description of function. The alias of the function is \"blablabla\". Parameters: Name Type Description Default arg1 int, default 5 Description of arg1 required arg2 str Description of arg2 required arg3 str The JMESpath query. required Returns: Type Description bool Description of return value Exceptions: Type Description AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a = 1 >>> b = 2 >>> func ( a , b ) True Source code in tests\\test_docstring_parser.py def test_google_style_docstring_parser ( benchmark ): \"\"\"Summary line. Extended description of function. The alias of the function is \"blablabla\". Args: arg1 (int, default 5): Description of arg1 arg2 (str): Description of arg2 arg3 (str): The [JMESpath](https://jmespath.org) query. Returns: bool: Description of return value Raises: AttributeError: The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError: If `arg2` is equal to `arg1`. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True \"\"\" # doc = parse(text=google_sample) doc = benchmark ( parse , text = test_google_style_docstring_parser . __doc__ ) assert doc . short_description == \"Summary line.\" assert doc . long_description == 'Extended description of function. \\n The alias of the function is \"blablabla\".' assert doc . params [ 0 ] . arg_name == \"arg1\" assert doc . params [ 0 ] . type_name == \"int, default 5\" assert doc . params [ 0 ] . description == \"Description of arg1\" assert doc . params [ 1 ] . arg_name == \"arg2\" assert doc . params [ 1 ] . type_name == \"str\" assert doc . params [ 1 ] . description == \"Description of arg2\" assert doc . params [ 2 ] . arg_name == \"arg3\" assert doc . params [ 2 ] . type_name == \"str\" assert doc . params [ 2 ] . description == \"The [JMESpath](https://jmespath.org) query.\" assert doc . returns . type_name == \"bool\" assert doc . returns . description == \"Description of return value\" assert doc . raises [ 0 ] . type_name == \"AttributeError\" assert doc . raises [ 1 ] . type_name == \"ValueError\" examples = [ meta for meta in doc . meta for args in meta . args if args == \"examples\" ] assert examples [ 0 ] . args == [ \"examples\" ] description = re . sub ( r \"\\s+\" , \" \" , examples [ 0 ] . description ) assert ( description == \"Examples should be written in doctest format, and should illustrate how to use the function.\" \" >>> a=1 >>> b=2 >>> func(a,b) True\" ) # TODO: google style 'notes' seems not to be supported # notes = [meta for meta in doc.meta for args in meta.args if args == \"notes\"] # assert notes[0].args == [\"notes\"] # assert notes[0].description == \"blabla\" test_numpy_style_docstring_parser ( benchmark ) Summary line. Extended description of function. Parameters arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The JMESpath query. Returns bool Description of return value Raises AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Examples Examples should be written in doctest format, and should illustrate how to use the function. a=1 b=2 func(a,b) True Notes blabla Source code in tests\\test_docstring_parser.py def test_numpy_style_docstring_parser ( benchmark ): \"\"\" Summary line. Extended description of function. Parameters ---------- arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The [JMESpath](https://jmespath.org) query. Returns ------- bool Description of return value Raises ------ AttributeError The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError If `arg2` is equal to `arg1`. Examples -------- Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True Notes ----- blabla \"\"\" # doc = parse(text=numpy_sample) doc = benchmark ( parse , text = test_numpy_style_docstring_parser . __doc__ ) assert doc . short_description == \"Summary line.\" assert doc . long_description == \"Extended description of function.\" assert doc . params [ 0 ] . arg_name == \"arg1\" assert doc . params [ 0 ] . type_name == \"int, default: 5\" assert doc . params [ 0 ] . description == \"Description of arg1\" assert doc . params [ 1 ] . arg_name == \"arg2\" assert doc . params [ 1 ] . type_name == \"str\" assert doc . params [ 1 ] . description == \"Description of arg2\" assert doc . params [ 2 ] . arg_name == \"arg3\" assert doc . params [ 2 ] . type_name == \"str\" assert doc . params [ 2 ] . description == \"The [JMESpath](https://jmespath.org) query.\" assert doc . returns . type_name == \"bool\" assert doc . returns . description == \"Description of return value\" assert doc . raises [ 0 ] . type_name == \"AttributeError\" assert doc . raises [ 1 ] . type_name == \"ValueError\" examples = [ meta for meta in doc . meta for args in meta . args if args == \"examples\" ] assert examples [ 0 ] . args == [ \"examples\" ] description = re . sub ( r \"\\s+\" , \" \" , examples [ 0 ] . description ) assert ( description == \"Examples should be written in doctest format, and should illustrate how to use the function.\" \" >>> a=1 >>> b=2 >>> func(a,b) True\" ) notes = [ meta for meta in doc . meta for args in meta . args if args == \"notes\" ] assert notes [ 0 ] . args == [ \"notes\" ] assert notes [ 0 ] . description == \"blabla\"","title":"Docstring Parser"},{"location":"docstring-parser/#docstring-parser","text":"","title":"Docstring Parser"},{"location":"docstring-parser/#tests.test_docstring_parser","text":"","title":"tests.test_docstring_parser"},{"location":"docstring-parser/#tests.test_docstring_parser.test_google_style_docstring_parser","text":"Summary line. Extended description of function. The alias of the function is \"blablabla\". Parameters: Name Type Description Default arg1 int, default 5 Description of arg1 required arg2 str Description of arg2 required arg3 str The JMESpath query. required Returns: Type Description bool Description of return value Exceptions: Type Description AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a = 1 >>> b = 2 >>> func ( a , b ) True Source code in tests\\test_docstring_parser.py def test_google_style_docstring_parser ( benchmark ): \"\"\"Summary line. Extended description of function. The alias of the function is \"blablabla\". Args: arg1 (int, default 5): Description of arg1 arg2 (str): Description of arg2 arg3 (str): The [JMESpath](https://jmespath.org) query. Returns: bool: Description of return value Raises: AttributeError: The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError: If `arg2` is equal to `arg1`. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True \"\"\" # doc = parse(text=google_sample) doc = benchmark ( parse , text = test_google_style_docstring_parser . __doc__ ) assert doc . short_description == \"Summary line.\" assert doc . long_description == 'Extended description of function. \\n The alias of the function is \"blablabla\".' assert doc . params [ 0 ] . arg_name == \"arg1\" assert doc . params [ 0 ] . type_name == \"int, default 5\" assert doc . params [ 0 ] . description == \"Description of arg1\" assert doc . params [ 1 ] . arg_name == \"arg2\" assert doc . params [ 1 ] . type_name == \"str\" assert doc . params [ 1 ] . description == \"Description of arg2\" assert doc . params [ 2 ] . arg_name == \"arg3\" assert doc . params [ 2 ] . type_name == \"str\" assert doc . params [ 2 ] . description == \"The [JMESpath](https://jmespath.org) query.\" assert doc . returns . type_name == \"bool\" assert doc . returns . description == \"Description of return value\" assert doc . raises [ 0 ] . type_name == \"AttributeError\" assert doc . raises [ 1 ] . type_name == \"ValueError\" examples = [ meta for meta in doc . meta for args in meta . args if args == \"examples\" ] assert examples [ 0 ] . args == [ \"examples\" ] description = re . sub ( r \"\\s+\" , \" \" , examples [ 0 ] . description ) assert ( description == \"Examples should be written in doctest format, and should illustrate how to use the function.\" \" >>> a=1 >>> b=2 >>> func(a,b) True\" ) # TODO: google style 'notes' seems not to be supported # notes = [meta for meta in doc.meta for args in meta.args if args == \"notes\"] # assert notes[0].args == [\"notes\"] # assert notes[0].description == \"blabla\"","title":"test_google_style_docstring_parser()"},{"location":"docstring-parser/#tests.test_docstring_parser.test_numpy_style_docstring_parser","text":"Summary line. Extended description of function.","title":"test_numpy_style_docstring_parser()"},{"location":"docstring-parser/#tests.test_docstring_parser.test_numpy_style_docstring_parser--parameters","text":"arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The JMESpath query.","title":"Parameters"},{"location":"docstring-parser/#tests.test_docstring_parser.test_numpy_style_docstring_parser--returns","text":"bool Description of return value","title":"Returns"},{"location":"docstring-parser/#tests.test_docstring_parser.test_numpy_style_docstring_parser--raises","text":"AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 .","title":"Raises"},{"location":"docstring-parser/#tests.test_docstring_parser.test_numpy_style_docstring_parser--examples","text":"Examples should be written in doctest format, and should illustrate how to use the function. a=1 b=2 func(a,b) True","title":"Examples"},{"location":"docstring-parser/#tests.test_docstring_parser.test_numpy_style_docstring_parser--notes","text":"blabla Source code in tests\\test_docstring_parser.py def test_numpy_style_docstring_parser ( benchmark ): \"\"\" Summary line. Extended description of function. Parameters ---------- arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The [JMESpath](https://jmespath.org) query. Returns ------- bool Description of return value Raises ------ AttributeError The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError If `arg2` is equal to `arg1`. Examples -------- Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True Notes ----- blabla \"\"\" # doc = parse(text=numpy_sample) doc = benchmark ( parse , text = test_numpy_style_docstring_parser . __doc__ ) assert doc . short_description == \"Summary line.\" assert doc . long_description == \"Extended description of function.\" assert doc . params [ 0 ] . arg_name == \"arg1\" assert doc . params [ 0 ] . type_name == \"int, default: 5\" assert doc . params [ 0 ] . description == \"Description of arg1\" assert doc . params [ 1 ] . arg_name == \"arg2\" assert doc . params [ 1 ] . type_name == \"str\" assert doc . params [ 1 ] . description == \"Description of arg2\" assert doc . params [ 2 ] . arg_name == \"arg3\" assert doc . params [ 2 ] . type_name == \"str\" assert doc . params [ 2 ] . description == \"The [JMESpath](https://jmespath.org) query.\" assert doc . returns . type_name == \"bool\" assert doc . returns . description == \"Description of return value\" assert doc . raises [ 0 ] . type_name == \"AttributeError\" assert doc . raises [ 1 ] . type_name == \"ValueError\" examples = [ meta for meta in doc . meta for args in meta . args if args == \"examples\" ] assert examples [ 0 ] . args == [ \"examples\" ] description = re . sub ( r \"\\s+\" , \" \" , examples [ 0 ] . description ) assert ( description == \"Examples should be written in doctest format, and should illustrate how to use the function.\" \" >>> a=1 >>> b=2 >>> func(a,b) True\" ) notes = [ meta for meta in doc . meta for args in meta . args if args == \"notes\" ] assert notes [ 0 ] . args == [ \"notes\" ] assert notes [ 0 ] . description == \"blabla\"","title":"Notes"},{"location":"lark-docstring-parser/","text":"Lark Docstring Parser test_parse_google_style ( benchmark ) Summary line. Extended description of function. 2nd line. 3rd line. Parameters: Name Type Description Default arg1 Description of arg1 required arg2 str Description of arg2 required arg3 The JMESpath query. required *args variable length argument list required **kwargs arbitrary keyword arguments required Returns: Type Description bool Description of return value Exceptions: Type Description AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Alias What ever you want to call Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a = 1 >>> b = 2 >>> func ( a , b ) True Source code in tests\\test_lark_docstring_parser.py @pytest . mark . repeat ( 1 ) def test_parse_google_style ( benchmark ): \"\"\"Summary line. Extended description of function. 2nd line. 3rd line. Args: arg1: Description of arg1 arg2 (str): Description of arg2 arg3: The [JMESpath](https://jmespath.org) query. *args: variable length argument list **kwargs: arbitrary keyword arguments Returns: bool: Description of return value Raises: AttributeError: The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError: If `arg2` is equal to `arg1`. Alias: What ever you want to call Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True \"\"\" def parse ( text ): parser = DocstringParser () return parser . parse ( text = text ) # docstring, error = parse(text=google_sample) docstring , error = benchmark ( parse , text = test_parse_google_style . __doc__ ) assert error is None , error assert docstring is not None assert_doctsring ( docstring ) test_parse_google_style_initialized_parser ( benchmark , parser ) Summary line. Extended description of function. 2nd line. 3rd line. Parameters: Name Type Description Default arg1 Description of arg1 required arg2 str Description of arg2 required arg3 The JMESpath query. required *args variable length argument list required **kwargs arbitrary keyword arguments required Returns: Type Description bool Description of return value Exceptions: Type Description AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Alias What ever you want to call Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a = 1 >>> b = 2 >>> func ( a , b ) True Source code in tests\\test_lark_docstring_parser.py @pytest . mark . repeat ( 1 ) def test_parse_google_style_initialized_parser ( benchmark , parser ): \"\"\"Summary line. Extended description of function. 2nd line. 3rd line. Args: arg1: Description of arg1 arg2 (str): Description of arg2 arg3: The [JMESpath](https://jmespath.org) query. *args: variable length argument list **kwargs: arbitrary keyword arguments Returns: bool: Description of return value Raises: AttributeError: The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError: If `arg2` is equal to `arg1`. Alias: What ever you want to call Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True \"\"\" # docstring, error = parser.parse(text=google_sample) docstring , error = benchmark ( parser . parse , text = test_parse_google_style_initialized_parser . __doc__ ) assert error is None , error assert docstring is not None assert_doctsring ( docstring )","title":"Lark Docstring parser"},{"location":"lark-docstring-parser/#lark-docstring-parser","text":"","title":"Lark Docstring Parser"},{"location":"lark-docstring-parser/#tests.test_lark_docstring_parser","text":"","title":"tests.test_lark_docstring_parser"},{"location":"lark-docstring-parser/#tests.test_lark_docstring_parser.test_parse_google_style","text":"Summary line. Extended description of function. 2nd line. 3rd line. Parameters: Name Type Description Default arg1 Description of arg1 required arg2 str Description of arg2 required arg3 The JMESpath query. required *args variable length argument list required **kwargs arbitrary keyword arguments required Returns: Type Description bool Description of return value Exceptions: Type Description AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Alias What ever you want to call Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a = 1 >>> b = 2 >>> func ( a , b ) True Source code in tests\\test_lark_docstring_parser.py @pytest . mark . repeat ( 1 ) def test_parse_google_style ( benchmark ): \"\"\"Summary line. Extended description of function. 2nd line. 3rd line. Args: arg1: Description of arg1 arg2 (str): Description of arg2 arg3: The [JMESpath](https://jmespath.org) query. *args: variable length argument list **kwargs: arbitrary keyword arguments Returns: bool: Description of return value Raises: AttributeError: The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError: If `arg2` is equal to `arg1`. Alias: What ever you want to call Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True \"\"\" def parse ( text ): parser = DocstringParser () return parser . parse ( text = text ) # docstring, error = parse(text=google_sample) docstring , error = benchmark ( parse , text = test_parse_google_style . __doc__ ) assert error is None , error assert docstring is not None assert_doctsring ( docstring )","title":"test_parse_google_style()"},{"location":"lark-docstring-parser/#tests.test_lark_docstring_parser.test_parse_google_style_initialized_parser","text":"Summary line. Extended description of function. 2nd line. 3rd line. Parameters: Name Type Description Default arg1 Description of arg1 required arg2 str Description of arg2 required arg3 The JMESpath query. required *args variable length argument list required **kwargs arbitrary keyword arguments required Returns: Type Description bool Description of return value Exceptions: Type Description AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Alias What ever you want to call Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a = 1 >>> b = 2 >>> func ( a , b ) True Source code in tests\\test_lark_docstring_parser.py @pytest . mark . repeat ( 1 ) def test_parse_google_style_initialized_parser ( benchmark , parser ): \"\"\"Summary line. Extended description of function. 2nd line. 3rd line. Args: arg1: Description of arg1 arg2 (str): Description of arg2 arg3: The [JMESpath](https://jmespath.org) query. *args: variable length argument list **kwargs: arbitrary keyword arguments Returns: bool: Description of return value Raises: AttributeError: The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError: If `arg2` is equal to `arg1`. Alias: What ever you want to call Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True \"\"\" # docstring, error = parser.parse(text=google_sample) docstring , error = benchmark ( parser . parse , text = test_parse_google_style_initialized_parser . __doc__ ) assert error is None , error assert docstring is not None assert_doctsring ( docstring )","title":"test_parse_google_style_initialized_parser()"},{"location":"numpydoc/","text":"Numpydoc test_numpydoc_function () Summary line. Extended description of function. Parameters arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The JMESpath query. Returns bool Description of return value Raises AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Examples Examples should be written in doctest format, and should illustrate how to use the function. a=1 b=2 func(a,b) True Notes blabla Source code in tests\\test_numpy_docstring_parser.py @pytest . mark . skip def test_numpydoc_function (): r \"\"\" Summary line. Extended description of function. Parameters ---------- arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The [JMESpath](https://jmespath.org) query. Returns ------- bool Description of return value Raises ------ AttributeError The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError If `arg2` is equal to `arg1`. Examples -------- Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True Notes ----- blabla \"\"\" doc = FunctionDoc ( func = test_numpydoc_function . __doc__ ) assert doc [ \"Parameters\" ] == [ Parameter ( name = \"a\" , type = \"int, default: 5\" , desc = [ \"Does something cool\" ]), Parameter ( name = \"b\" , type = \"str\" , desc = [ \"Wow\" ]), ] assert doc [ \"See Also\" ] == [([( \"blabla\" , None )], [])] assert doc [ \"Notes\" ] == [ \"alias: blabla\" , \"adesso tu\" ] test_numpydoc_string ( benchmark ) Summary line. Extended description of function. Parameters arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The JMESpath query. Returns bool Description of return value Raises AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Examples Examples should be written in doctest format, and should illustrate how to use the function. a=1 b=2 func(a,b) True Notes blabla Source code in tests\\test_numpy_docstring_parser.py def test_numpydoc_string ( benchmark ): r \"\"\" Summary line. Extended description of function. Parameters ---------- arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The [JMESpath](https://jmespath.org) query. Returns ------- bool Description of return value Raises ------ AttributeError The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError If `arg2` is equal to `arg1`. Examples -------- Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True Notes ----- blabla \"\"\" # doc = NumpyDocString(docstring=sample_function.__doc__) doc = benchmark ( NumpyDocString , docstring = test_numpydoc_string . __doc__ ) assert doc [ \"Summary\" ] == [ \"Summary line.\" ] assert doc [ \"Extended Summary\" ] == [ \"Extended description of function.\" ] assert doc [ \"Parameters\" ] == [ Parameter ( name = \"arg1\" , type = \"int, default: 5\" , desc = [ \"Description of arg1\" ]), Parameter ( name = \"arg2\" , type = \"str\" , desc = [ \"Description of arg2\" ]), Parameter ( name = \"arg3\" , type = \"str\" , desc = [ \"The [JMESpath](https://jmespath.org) query.\" ], ), ] assert doc [ \"Returns\" ] == [ Parameter ( name = \"\" , type = \"bool\" , desc = [ \"Description of return value\" ])] assert doc [ \"Raises\" ] == [ Parameter ( name = \"\" , type = \"AttributeError\" , desc = [ \"The ``Raises`` section is a list of all exceptions\" , \"that are relevant to the interface.\" , ], ), Parameter ( name = \"\" , type = \"ValueError\" , desc = [ \"If `arg2` is equal to `arg1`.\" ]), ] assert doc [ \"Examples\" ] == [ \"Examples should be written in doctest format, and should illustrate how\" , \"to use the function.\" , \"\" , \">>> a=1\" , \">>> b=2\" , \">>> func(a,b)\" , \"True\" , ] assert doc [ \"Notes\" ] == [ \"blabla\" ]","title":"Numpydoc"},{"location":"numpydoc/#numpydoc","text":"","title":"Numpydoc"},{"location":"numpydoc/#tests.test_numpy_docstring_parser","text":"","title":"tests.test_numpy_docstring_parser"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_function","text":"Summary line. Extended description of function.","title":"test_numpydoc_function()"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_function--parameters","text":"arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The JMESpath query.","title":"Parameters"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_function--returns","text":"bool Description of return value","title":"Returns"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_function--raises","text":"AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 .","title":"Raises"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_function--examples","text":"Examples should be written in doctest format, and should illustrate how to use the function. a=1 b=2 func(a,b) True","title":"Examples"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_function--notes","text":"blabla Source code in tests\\test_numpy_docstring_parser.py @pytest . mark . skip def test_numpydoc_function (): r \"\"\" Summary line. Extended description of function. Parameters ---------- arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The [JMESpath](https://jmespath.org) query. Returns ------- bool Description of return value Raises ------ AttributeError The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError If `arg2` is equal to `arg1`. Examples -------- Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True Notes ----- blabla \"\"\" doc = FunctionDoc ( func = test_numpydoc_function . __doc__ ) assert doc [ \"Parameters\" ] == [ Parameter ( name = \"a\" , type = \"int, default: 5\" , desc = [ \"Does something cool\" ]), Parameter ( name = \"b\" , type = \"str\" , desc = [ \"Wow\" ]), ] assert doc [ \"See Also\" ] == [([( \"blabla\" , None )], [])] assert doc [ \"Notes\" ] == [ \"alias: blabla\" , \"adesso tu\" ]","title":"Notes"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_string","text":"Summary line. Extended description of function.","title":"test_numpydoc_string()"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_string--parameters","text":"arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The JMESpath query.","title":"Parameters"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_string--returns","text":"bool Description of return value","title":"Returns"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_string--raises","text":"AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 .","title":"Raises"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_string--examples","text":"Examples should be written in doctest format, and should illustrate how to use the function. a=1 b=2 func(a,b) True","title":"Examples"},{"location":"numpydoc/#tests.test_numpy_docstring_parser.test_numpydoc_string--notes","text":"blabla Source code in tests\\test_numpy_docstring_parser.py def test_numpydoc_string ( benchmark ): r \"\"\" Summary line. Extended description of function. Parameters ---------- arg1 : int, default: 5 Description of arg1 arg2 : str Description of arg2 arg3 : str The [JMESpath](https://jmespath.org) query. Returns ------- bool Description of return value Raises ------ AttributeError The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError If `arg2` is equal to `arg1`. Examples -------- Examples should be written in doctest format, and should illustrate how to use the function. >>> a=1 >>> b=2 >>> func(a,b) True Notes ----- blabla \"\"\" # doc = NumpyDocString(docstring=sample_function.__doc__) doc = benchmark ( NumpyDocString , docstring = test_numpydoc_string . __doc__ ) assert doc [ \"Summary\" ] == [ \"Summary line.\" ] assert doc [ \"Extended Summary\" ] == [ \"Extended description of function.\" ] assert doc [ \"Parameters\" ] == [ Parameter ( name = \"arg1\" , type = \"int, default: 5\" , desc = [ \"Description of arg1\" ]), Parameter ( name = \"arg2\" , type = \"str\" , desc = [ \"Description of arg2\" ]), Parameter ( name = \"arg3\" , type = \"str\" , desc = [ \"The [JMESpath](https://jmespath.org) query.\" ], ), ] assert doc [ \"Returns\" ] == [ Parameter ( name = \"\" , type = \"bool\" , desc = [ \"Description of return value\" ])] assert doc [ \"Raises\" ] == [ Parameter ( name = \"\" , type = \"AttributeError\" , desc = [ \"The ``Raises`` section is a list of all exceptions\" , \"that are relevant to the interface.\" , ], ), Parameter ( name = \"\" , type = \"ValueError\" , desc = [ \"If `arg2` is equal to `arg1`.\" ]), ] assert doc [ \"Examples\" ] == [ \"Examples should be written in doctest format, and should illustrate how\" , \"to use the function.\" , \"\" , \">>> a=1\" , \">>> b=2\" , \">>> func(a,b)\" , \"True\" , ] assert doc [ \"Notes\" ] == [ \"blabla\" ]","title":"Notes"},{"location":"pdoc3-parser/","text":"Pdoc3 Parser function_google_style ( arg1 , arg2 , arg3 ) Summary line. Extended description of function. Parameters: Name Type Description Default arg1 int Description of arg1 required arg2 str Description of arg2 required arg3 str The JMESpath query. required Returns: Type Description list bool: Description of return value Exceptions: Type Description AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Examples: Examples should be written in doctest format, and should illustrate how to use the function. a=1 b=2 func(a,b) True Alias Give the function an alias name. Source code in tests\\test_pdoc3_docstring_parser.py def function_google_style ( arg1 : int , arg2 : str , arg3 : str ) -> list : \"\"\"Summary line. Extended description of function. Args: arg1 (int, default 5): Description of arg1 arg2 (str): Description of arg2 arg3 (str): The [JMESpath](https://jmespath.org) query. Returns: bool: Description of return value Raises: AttributeError: The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError: If `arg2` is equal to `arg1`. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >> a=1 >> b=2 >> func(a,b) True Alias: Give the function an alias name. \"\"\"","title":"Pdoc3"},{"location":"pdoc3-parser/#pdoc3-parser","text":"","title":"Pdoc3 Parser"},{"location":"pdoc3-parser/#tests.test_pdoc3_docstring_parser","text":"","title":"tests.test_pdoc3_docstring_parser"},{"location":"pdoc3-parser/#tests.test_pdoc3_docstring_parser.function_google_style","text":"Summary line. Extended description of function. Parameters: Name Type Description Default arg1 int Description of arg1 required arg2 str Description of arg2 required arg3 str The JMESpath query. required Returns: Type Description list bool: Description of return value Exceptions: Type Description AttributeError The Raises section is a list of all exceptions that are relevant to the interface. ValueError If arg2 is equal to arg1 . Examples: Examples should be written in doctest format, and should illustrate how to use the function. a=1 b=2 func(a,b) True Alias Give the function an alias name. Source code in tests\\test_pdoc3_docstring_parser.py def function_google_style ( arg1 : int , arg2 : str , arg3 : str ) -> list : \"\"\"Summary line. Extended description of function. Args: arg1 (int, default 5): Description of arg1 arg2 (str): Description of arg2 arg3 (str): The [JMESpath](https://jmespath.org) query. Returns: bool: Description of return value Raises: AttributeError: The ``Raises`` section is a list of all exceptions that are relevant to the interface. ValueError: If `arg2` is equal to `arg1`. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >> a=1 >> b=2 >> func(a,b) True Alias: Give the function an alias name. \"\"\"","title":"function_google_style()"},{"location":"prerequisites/","text":"Prerequisites to be added","title":"Installation"},{"location":"prerequisites/#prerequisites","text":"to be added","title":"Prerequisites"},{"location":"sphinx-napoleon/","text":"Sphinx Napoleon test_sphinx_napaleon ( benchmark ) Something something Parameters a : int, default: 5 Does something cool b : str Wow See Also blabla Notes alias: blabla adesso tu Source code in tests\\test_sphinx_napoleon.py def test_sphinx_napaleon ( benchmark ): \"\"\" Something something Parameters ---------- a : int, default: 5 Does something cool b : str Wow See Also -------- blabla Notes ----- alias: blabla adesso tu \"\"\" # doc = NumpyDocstring(docstring=sample, config=config) doc = benchmark ( NumpyDocstring , docstring = test_sphinx_napaleon . __doc__ , config = config ) print ( \" \\n \" . join ( doc . lines ()))","title":"Sphinx Napoleon"},{"location":"sphinx-napoleon/#sphinx-napoleon","text":"","title":"Sphinx Napoleon"},{"location":"sphinx-napoleon/#tests.test_sphinx_napoleon","text":"","title":"tests.test_sphinx_napoleon"},{"location":"sphinx-napoleon/#tests.test_sphinx_napoleon.test_sphinx_napaleon","text":"Something something","title":"test_sphinx_napaleon()"},{"location":"sphinx-napoleon/#tests.test_sphinx_napoleon.test_sphinx_napaleon--parameters","text":"a : int, default: 5 Does something cool b : str Wow","title":"Parameters"},{"location":"sphinx-napoleon/#tests.test_sphinx_napoleon.test_sphinx_napaleon--see-also","text":"blabla","title":"See Also"},{"location":"sphinx-napoleon/#tests.test_sphinx_napoleon.test_sphinx_napaleon--notes","text":"alias: blabla adesso tu Source code in tests\\test_sphinx_napoleon.py def test_sphinx_napaleon ( benchmark ): \"\"\" Something something Parameters ---------- a : int, default: 5 Does something cool b : str Wow See Also -------- blabla Notes ----- alias: blabla adesso tu \"\"\" # doc = NumpyDocstring(docstring=sample, config=config) doc = benchmark ( NumpyDocstring , docstring = test_sphinx_napaleon . __doc__ , config = config ) print ( \" \\n \" . join ( doc . lines ()))","title":"Notes"}]}